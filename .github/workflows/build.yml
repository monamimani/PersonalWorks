name: Cmake build

on: [push, pull_request, release]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            os: windows-latest,
            buildConfig: debug,
            configurePreset: windows-vs2022,
            buildPreset: windows-vs2022-x64-debug,
            testPreset: windows-vs2022-x64-debug,
            experimental: false
          }
        # - {
        #     os: windows-latest,
        #     buildConfig: relWithDebInfo,
        #     configurePreset: windows-vs2022,
        #     buildPreset: windows-vs2022-x64-release,
        #     testPreset: windows-vs2022-x64-release,
        #     experimental: false
        #   }
        # - {
        #     os: windows-latest,
        #     buildConfig: release,
        #     configurePreset: windows-vs2022,
        #     buildPreset: windows-vs2022-x64-shipping,
        #     testPreset: windows-vs2022-x64-shipping,
        #     experimental: false
        #   }
        # - {
        #     os: ubuntu-latest,
        #     buildConfig: debug,
        #     configurePreset: linux-ninja-multi-config,
        #     buildPreset: linux-ninja-multi-config-x64-debug,
        #     testPreset: linux-ninja-multi-config-x64-debug,
        #     experimental: true
        #   }
        # - {
        #     os: ubuntu-latest,
        #     buildConfig: relWithDebInfo,
        #     configurePreset: linux-ninja-multi-config,
        #     buildPreset: linux-ninja-multi-config-x64-release,
        #     testPreset: linux-ninja-multi-config-x64-release,
        #     experimental: true
        #   }
        # - {
        #     os: ubuntu-latest,
        #     buildConfig: release,
        #     configurePreset: linux-ninja-multi-config,
        #     buildPreset: linux-ninja-multi-config-x64-shipping,
        #     testPreset: linux-ninja-multi-config-x64-shipping,
        #     experimental: true
        #   }
        


  # include:
  #   - os: windows-latest
  #     buildType: Debug
  #     configurePreset: x64-debug
  #   - os: windows-latest
  #     buildType: Release
  #     configurePreset: x64-release
  #   - os: windows-latest
  #     buildType: Shipping
  #     configurePreset: x64-shipping
    # name: ${{ matrix.buildType }} build on ${{ matrix.os }}
    runs-on: ${{ matrix.config.os }}
    continue-on-error: ${{ matrix.config.experimental }}
    name: ${{ matrix.config.buildPreset }}

    env:
      binDir: "_Out/build/${{ matrix.config.configurePreset }}/_bin"
      fullBinDir: "${{ github.workspace }}/_Out/build/${{ matrix.config.configurePreset }}/_bin"
      libDir: "_Out/build/${{ matrix.config.configurePreset }}/_lib"

    steps:
    - uses: actions/checkout@v3  
      with:
        lfs: true
        submodules: true

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: _Out/build/${{ matrix.config.configurePreset }}/vcpkg_installed
        key: ${{ runner.os }}-${{ matrix.config.configurePreset }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

    - name: Install Linux packages
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        sudo apt-get install ninja-build

    - name: Cache Windows packages
      if: runner.os == 'Windows'
      id: cache-install-opencppcoverage
      uses: actions/cache@v3
      with:
        path: C:\Program Files\OpenCppCoverage
        key: ${{ runner.os }}-cache-install-opencppcoverage
        
    - name: Install Windows packages
      if: (runner.os == 'Windows') && (steps.cache-install-opencppcoverage.outputs.cache-hit != 'true')
      shell: pwsh
      run: |
        choco install opencppcoverage

    - name: "Set environmental variables"
      shell: bash
      run: |
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH

    - name: Cmake Configure
      run: |
        cmake --preset ${{ matrix.config.configurePreset }}

    - name: Cmake Build
      # if: runner.os == 'Windows'
      run: |
        cmake --build --preset ${{ matrix.config.buildPreset }}

    - name: Run Google test (Windows)
      if: runner.os == 'Windows'
      run: |
        $binDir = "${{ env.binDir }}"
        $testExe = (Get-ChildItem -Path $binDir -Recurse | Where-Object Name -like *tests*.exe).FullName
        foreach ($exe in $testExe) {
          Write-Host($exe)
          $exeName = Get-ChildItem $exe | Select-Object -ExpandProperty BaseName
          Write-Host($exeName)
          &$exe --gtest_output=json:$binDir/
        }
        #| Where-Object { $_.Filename -match 'tests' }
        #| Where-Object { $_.DirectoryName -match 'Release' }

    - name: Run Google test (Linux)
      if: runner.os == 'Linux'
      run: |
        ctest --preset ${{ matrix.config.testPreset }} --show-only

    # - name: CTest
    #   run: |
    #     ctest --show-only
    #     # ctest --preset ${{ matrix.config.testPreset }}

    - name: OpenCppCoverage
      run: |
        $buildConfigDir = Resolve-Path -Path "${{ env.binDir }}/${{ matrix.config.buildConfig }}"
        OpenCppCoverage --config_file=OpenCppCoverage.config.txt --modules=$buildConfigDir --excluded_sources="*\vcpkg_installed"  --export_type=cobertura:"$buildConfigDir/coverage.xml" -- $buildConfigDir/CoreTests.exe --gtest_brief=1

    - name: Codecov
      uses: codecov/codecov-action@v3.1.1
      with:
        name: ${{github.repository}}
        directory: "./${{ env.binDir }}/${{ matrix.config.buildConfig }}/"
        files: ./coverage.xml 
        verbose: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: PersonalWorks_${{github.workflow}}-${{github.job}}_TestsResults
        path: |
          _Out/build/${{ matrix.config.configurePreset }}/_bin/*.json

    - name: Upload Workflow artifact
      uses: actions/upload-artifact@v3
      with:
        name: PersonalWorks_${{github.workflow}}-${{github.job}}_Out
        path: |
          _Out/build/${{ matrix.config.configurePreset }}/_bin
          _Out/build/${{ matrix.config.configurePreset }}/_lib
