name: Tests
description: Tests the targets of Personalworks.

inputs:
  buildConfig:
    description: "The build configuration"
    required: true
  configurePreset:
    description: "The Cmake configure preset"
    required: true
  testPreset:
    description: "The Cmake test preset"
    required: true

runs:
  using: "composite"

  steps:
  - name: Foresight Collect Workflow Telemetry
    uses: runforesight/foresight-workflow-kit-action@v1
    if: ${{ always() }}
    with:
      api_key: ${{ secrets.FORESIGHT_API_KEY }}

  - name: Cache Build
    id: cache-build
    uses: actions/cache@v3
    with:
      path: |
        "_Out/build/${{ inputs.configurePreset }}/_bin/${{ inputs.buildConfig }}"
        OpenCppCoverage.config.txt
      key: CacheBuild-${{ github.run_id }}-${{ runner.os }}-${{ inputs.configurePreset }}-${{ inputs.buildConfig }}

  - name: Install Linux packages
    if: runner.os == 'Linux'
    shell: bash
    run: |
      sudo apt update
      sudo apt install gcc-11 g++-11
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
      sudo apt-get install ninja-build

  - name: Cache Windows packages
    if: runner.os == 'Windows'
    id: cache-install-opencppcoverage
    uses: actions/cache@v3
    with:
      path: C:\Program Files\OpenCppCoverage
      key: ${{ runner.os }}-cache-install-opencppcoverage
      
  - name: Install Windows packages
    if: (runner.os == 'Windows') && (steps.cache-install-opencppcoverage.outputs.cache-hit != 'true')
    shell: pwsh
    run: |
      choco install opencppcoverage

  - name: Set environmental variables
    shell: bash
    run: |
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
      echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH

  - name: Run Google test (Windows)
    if: runner.os == 'Windows'
    shell: pwsh
    run: |
      $buildConfigBinDir = "_Out/build/${{ inputs.configurePreset }}/_bin/${{ inputs.buildConfig }}"
      Get-ChildItem -Recurse -Force
      
      $testExe = (Get-ChildItem -Path $buildConfigBinDir -Recurse | Where-Object Name -like *tests*.exe).FullName
      foreach ($exe in $testExe) {
        Write-Host($exe)
        $exeName = Get-ChildItem $exe | Select-Object -ExpandProperty BaseName
        Write-Host($exeName)
        &$exe --gtest_output=xml:$buildConfigBinDir/
      }
      #| Where-Object { $_.Filename -match 'tests' }
      #| Where-Object { $_.DirectoryName -match 'Release' }

  # - name: Run Google test (Linux)
  #   if: runner.os == 'Linux'
  #   run: |
  #     ctest --preset ${{ matrix.config.testPreset }} --show-only

  - name: OpenCppCoverage
    shell: bash
    run: |
      $buildConfigDir = Resolve-Path -Path "_Out/build/${{ inputs.configurePreset }}/_bin/${{ inputs.buildConfig }}"
      OpenCppCoverage --config_file=OpenCppCoverage.config.txt --modules=$buildConfigDir --excluded_sources="*\vcpkg_installed" --excluded_sources="Projects\TestUtilities\*" --excluded_sources="Projects\*.test*"  --export_type=cobertura:coverage.xml -- $buildConfigDir/CoreTests.exe --gtest_brief=1

  - name: Foresight Upload Test/Coverage Results
    uses: runforesight/foresight-test-kit-action@v1
    if: ${{ always() }}
    with:
      api_key: ${{ secrets.FORESIGHT_API_KEY }}
      test_framework: JUNIT
      test_format: JUNIT
      test_path: "_Out/build/${{ inputs.configurePreset }}/_bin/${{ inputs.buildConfig }}/*.xml"
      coverage_format: COBERTURA/XML
      coverage_path: ./coverage.xml
      tags: | 
        os:${{ runner.os }}
        buildConfig:${{ inputs.buildConfig }}

  - name: Codecov
    uses: codecov/codecov-action@v3.1.1
    with:
      flags: ${{ runner.os }}-${{ inputs.buildConfig }}
      name: ${{github.repository}}
      files: ./coverage.xml

  - name: Cache Test Results
    id: cache-testresults
    uses: actions/cache@v3
    with:
      key: CacheTestsResults-${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('_Out/build/${{ inputs.configurePreset }}/_bin/**') }}
      path: |
        _Out/build/${{ inputs.configurePreset }}/_bin/*/*.xml

  - name: Upload Artifact Test Results ${{ inputs.buildConfig }}
    uses: actions/upload-artifact@v3
    with:
      name: ${{github.workflow}}-${{ inputs.configurePreset }}-TestsResults-${{github.run_number}}
      path: |
        _Out/build/${{ inputs.configurePreset }}/_bin/*/*.xml